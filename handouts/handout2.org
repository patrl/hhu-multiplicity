#+title: Plurality and collective predication cont.
#+subtitle: Handout 3
#+author: Patrick D. Elliott
#+bibliography: ../../bibliography/master.bib
#+setupfile: ./handout-template.org
#+OPTIONS: ':t
#+cite_export: biblatex

* Reading

- [cite:@Champollion2016]
  
* Recap: distributive and collective predication

** Distributive and collective predication

Generalized conjunction (\(\sqcap\)) and generalized disjunction (\(\sqcup\)), which are recursive generalizations of boolean conjunction/disjunction respectively, predict \textit{distributive inferences} across a broad variety of example sentences.

#+name: gen-conj
#+begin_exe
\ex *Generalized conjunction:*\\
 \(P_\tau \sqcap Q_\tau = \begin{cases}
P \wedge Q&\text{if }\tau = T\\
\lambda x\,.\,P(x) \sqcap_\rho Q(x)&\text{if }\tau = \sigma \rightarrow \rho  
\end{cases}\)
#+end_exe

#+name: mj1
#+begin_exe
\ex Mary and John slept.\\
\(\iff \) Mary slept and John slept.
\ex Most women or most men are tall.\\
\(\iff \) Most women are tall or most men are tall.
\ex Neither the milkman nor the postman arrived.\\
\(\iff\) Neither did the milkman arrive, nor did the postman.
#+end_exe

** Montague Lift

/Montague lift/ converts expressions such as *Mary* and *John* into expressions with a boolean type, allowing them to be subject to generalized conjunction.

#+name: lift
#+begin_exe
\ex \(\mathbf{Mary}^\uparrow := \lambda P_{_{ET}}\,.\,P(\mathbf{Mary})\)
#+end_exe

#+name: ml1
#+begin_exe
\ex \(\mathbf{Mary}^\uparrow \sqcap \mathbf{John}^\uparrow(\mathbf{sleep})\)
\ex \(((\lambda P\,.\,P(\mathbf{Mary})) \sqcap (\lambda P\,.\,P(\mathbf{John})))(\mathbf{sleep})\)
\ex \((\lambda P\,.\,P(\mathbf{Mary}) \wedge P(\mathbf{John}))(\mathbf{sleep})\)
\ex \(\mathbf{sleep}(\mathbf{Mary}) \wedge \mathbf{sleep}(\mathbf{John})\)
#+end_exe

** Collective predication

Verbs:

#+name: verbs
#+begin_exe
\ex Lexically collective: /gather/, /disperse/, /meet/ (when used intransitively), /outnumber/ (both arguments).
\ex Lexically "mixed" collective/distributive: the subject argument of /write/, /lift/, /eat/, and /carry/.
\ex /together/ modification: /sing together/, /live together/, /write NP together/.
\ex /between them/ modification: /grade over 200 papers between them/, /ate 15 pizzas between them/.
\ex Reciprocal modification: /like each other/, /look at one another/.
#+end_exe

Adjectives:

#+name: adjectives
#+begin_exe
\ex Lexically collective: /numerous/, /similar/, /alike/, /parallel/, /antagonistic/, /equivalent/, /neighboring/.
\ex /together/ modification: /happy together/, /irritating together/.
\ex Reciprocal modification: /nice to each other/, /fond of one another/.
#+end_exe

Predicative constructions with nominals:

#+name: nom
#+begin_exe
\ex Group denoting nominals: /seem a big group/, /be the organizing committee/, /be a nice couple/.
\ex Relational nominals: /be brothers/, /sisters/, /friends/.
\ex Nominals modified by collective adjectives: /be numerous people/, /similar students/, /parallel lines/.
\ex Reciprocal possessives: /be teachers of each other/, /be admirers of one another/.
#+end_exe

* A type-theoretic approach to plural individuals

** Plural individuals

Fundamental hypothesis: a plural individual is a /set of individuals/.

#+name: jms
#+begin_exe
\ex John, Mary and Sue = \(\set{\mathbf{J}, \mathbf{M}, \mathbf{S}}\)
\ex The boys = \(\set{\mathbf{J},\mathbf{B},\mathbf{H}}\)
#+end_exe

How do we model sets of individuals in the Simply-Typed \(\lambda\)-calculus? Recall, the denotation of an expression of type \(E \to T\) is a function \(f:\mathbf{Dom}_E \mapsto \mathbf{Dom}_E\).

A /set/ of individuals can be modelled as a function from individuals to truth-values, where members of the set are mapped to *true*, and non-members are mapped to *false*. This is called the *characteristic function* of the set.

Here's the characteristic function of the set of /John/, /Mary/, and /Sue/:

\[\left[\begin{aligned}[c]
&\mathbf{J} &\mapsto \mathbf{true}\\
&\mathbf{M} &\mapsto \mathbf{true}\\
&\mathbf{S} &\mapsto \mathbf{true}\\
&\mathbf{B} &\mapsto \mathbf{false}\\
&\mathbf{H} &\mapsto \mathbf{false}\\
&\ldots
\end{aligned}\right]\]

Here's the characteristic function of the set of /John/, /Bill/, and /Harry/ (i.e., /the boys/):

\[\left[\begin{aligned}[c]
&\mathbf{J} &\mapsto \mathbf{true}\\
&\mathbf{M} &\mapsto \mathbf{false}\\
&\mathbf{S} &\mapsto \mathbf{false}\\
&\mathbf{B} &\mapsto \mathbf{true}\\
&\mathbf{H} &\mapsto \mathbf{true}\\
&\ldots
\end{aligned}\right]\]
  
Our hypothesis will be that a /group-denoting NP/ is translated to an /expression of type \(E \to T\)/

Since /characteristic functions/ are ways of encoding sets, we can also translate familiar set-theoretic notions of /intersection/ and /union/ into operations on functions. Look familiar?  

#+name: op1
#+begin_exe
\ex \(P_{ET} \sqcap Q_{ET}= \lambda x\,.\,P(x) \wedge Q(x)\)
\ex \(P_{ET} \sqcup Q_{ET}= \lambda x\,.\,P(x) \vee Q(x)\)
#+end_exe

If group-denoting NPs are of type \(E \to T\), there's an obvious way to encode the selectional requirements of strictly collective predicates - we can translate them as expressions of type \((E \to T) \to T\).

|            | Singular/Distributive | Plural/Collective     |
|------------+-----------------------+-----------------------|
| Individual | \(E\)                 | \(E \to T\)             |
| Predicate  | \(E \to T\)             | \((E \to T) \to T\)       |
| Quantifier | \((E \to T) \to T\)       | \(((E \to T) \to T) \to T\) |

** Collective predication in practice

Collective predicates denote /higher-order functions/ from functions \(f: \mathbf{Dom}_E \to \mathbf{Dom}_T\) to \(\mathbf{Dom}_T\).

What does this mean? /met/ takes a function \(P_{ET}\), and maps it to true, just in case the individuals that \(P\) maps to true met each other.

Imagine that the set of individuals is \(\set{a,b,c}\), and the only meetings that happened were between \(a,b\) and \(a,c\). The denotation of \(\mathbf{met}_{ET \to T}\) would be as follows:

\[\left[\begin{aligned}[c]
\left[\begin{aligned}[c]
&a \to \mathbf{t}\\
&b \to \mathbf{t}\\
&c \to \mathbf{t}
\end{aligned}\right] \to \mathbf{f}
\left[\begin{aligned}[c]
&a \to \mathbf{t}\\
&b \to \mathbf{t}\\
&c \to \mathbf{f}
\end{aligned}\right] \to \mathbf{t}
\left[\begin{aligned}[c]
&a \to \mathbf{t}\\
&b \to \mathbf{f}\\
&c \to \mathbf{t}
\end{aligned}\right] \to \mathbf{t}\\
\left[\begin{aligned}[c]
&a \to \mathbf{f}\\
&b \to \mathbf{t}\\
&c \to \mathbf{t}
\end{aligned}\right] \to \mathbf{f}
\left[\begin{aligned}[c]
&a \to \mathbf{t}\\
&b \to \mathbf{f}\\
&c \to \mathbf{f}
\end{aligned}\right] \to \mathbf{f}
\left[\begin{aligned}[c]
&a \to \mathbf{f}\\
&b \to \mathbf{t}\\
&c \to \mathbf{f}
\end{aligned}\right] \to \mathbf{f}\\
\left[\begin{aligned}[c]
&a \to \mathbf{f}\\
&b \to \mathbf{f}\\
&c \to \mathbf{t}
\end{aligned}\right] \to \mathbf{f}
\left[\begin{aligned}[c]
&a \to \mathbf{f}\\
&b \to \mathbf{f}\\
&c \to \mathbf{f}
\end{aligned}\right] \to \mathbf{f}
\end{aligned}\right]\]

Due to the equivalence between characteristic functions and sets, we can also write the denotation of a collective predicate as a /set of sets/. This will often be much more convenient. I.e., the following set of sets encodes the same information.

\[\set{\set{a,b},\set{a,c}}\]

As a starting point, we'll assume that plural definites such as "the boys", and conjunctions of singular definites such as "John, Mary, and Sue", are translated as expressions of type \(E \to T\), and therefore denote sets of individuals.

#+name: exps
#+begin_exe
\ex \(\mathbf{theBoys}_{ET}\)
\ex \(\mathbf{JohnMaryAndSue}_{ET}\)
#+end_exe

* The quantifier-collectivity connection and NP conjunction

** Generalized quantifiers and collective predicates

On the approach to collective predicates outlined here, not that a collective predicate and a generalized quantifier are of the same type.

#+name: qu
#+begin_exe
\ex \(\mathbf{meet}_{ET \to T} := \lambda X\,.\,\mathbf{meet}(X)\)
\ex \(\mathbf{noBoy}_{ET \to T} := \lambda X\,.\,\neg\exists x[\mathbf{boy}(x) \wedge X(x)]\)
#+end_exe

In set-talk:

#+name: set
#+begin_exe
\ex \(Set(\eval*{\mathbf{meet}}) = \set{X | \text{individuals in } X\text{ met}}\)
\ex \(Set(\eval*{\mathbf{noBoy}}) = \set{X | \text{there are no boys in }X }\)
#+end_exe

For this reason, we (correctly in this case) predict that a quantificational NP and a collective predicate can't compose.

#+name: noBoy
#+begin_exe
\ex *No boy met.
#+end_exe

** The problem of NP conjunction

Now we're in a position to start thinking about how to account for the fact that conjoined NPs are compatible with collective predicates.

#+name: ms
#+begin_exe
\ex Mary and Sue met.
#+end_exe

Recall that conjunction can't even compose with *Mary* and *Sue* unless they undergo Montague lift.

Once we lift the NPs, doing generalized conjunction gives us back a generalized quantifier.

#+name: g
#+begin_exe
\ex \(\mathbf{Mary}^\uparrow \sqcap \mathbf{Sue}^\uparrow = \lambda P_{ET}\,.\,P(\mathbf{Mary}) \wedge P(\mathbf{Sue})\)
#+end_exe

In set-talk:

#+name: set
#+begin_exe
\ex \(\set{P |\mathbf{Mary} \in P \text{ and }\mathbf{Sue} \in P}\)
#+end_exe

Note that aside from the typing problem, these aren't the right kind of sets to feed in as the argument of *meet* - they contain too many other individuals!

What we want is a type shifting function which takes the type \(ET \to T\) expression in ([[g]]), and gives back a /generalized quantifier over collections/ of type \((ET \to T) \to T\).

Winter posits two type-shifters to derive this (which we'll discuss in more detail next week).

- Minimum sort.
- Existential raising.
  
** Minimum sort

*Min* is an operator that takes a generalized quantifier \(Q\) of type \(ET \to T\), and gives back the /minimal members/ of \(Q\). This is defined formally as in ([[min]]) (note that Winter gives a generalized version of ([[mmm[[min]]), but we'll only need the formulation for quantifiers over individuals).

#+name: min
#+begin_exe
\ex \(\mathbf{Min}_{ETT \rightarrow ETT} := \lambda Q_{ETT}_{}\lambda A_{ET}\,.\, Q(A) \wedge \forall B \in Q[B \subseteq A \rightarrow B = A]\)
#+end_exe

- What is the result of applying *Min* to /a boy/?
- What is the result of applying *Min* to /every boy/?
- What is the result of applying *Min* to lifted *Mary*?
- What is the result of applying *Min* to 'Mary and Sue'?
  
#+name: min2
#+begin_exe
\ex \(\mathbf{Min}(\lambda P\,.\,P(\mathbf{Mary}) \wedge P(\mathbf{Sue})) = \set{\set{\mathbf{Mary},\mathbf{Sue}}}\)
#+end_exe

This still isn't of the right type to combine with a collective predicate, but we're getting closer.

** Existential raising

#+name: ex
#+begin_exe
\ex \(\mathbf{E}_{ETT \rightarrow ETT \to T} := \lambda A\,.\,\lambda P\,.\,\exists X[A(X) \wedge P(X)]\)
#+end_exe

** NP conjunction with collective predicates

#+name: coll
#+begin_exe
\ex \(\mathbf{E}(\mathbf{Min}(\mathbf{Mary}^\uparrow \sqcap \mathbf{Sue}^\uparrow))(\mathbf{met})\)
#+end_exe

** Collectivity in Boolean domains

Why do we need to do minimum sort, and /then/ existentially raise? Since the minimum sort of a generalized conjunction of lifted individuals is a singleton set, why don't we define an operator which returns the unique minimal set of a quantifier.

Winter shows that this doesn't generalize to more complex examples involving conjunction /and/ disjunction.

#+name: mjs
#+begin_exe
\ex Mary and either Sue or John met.
#+end_exe

Verify that the minimum sort has more than one member:

#+name: lf
#+begin_exe
\ex \(\mathbf{Min}(\mathbf{Mary} \sqcap (\mathbf{Sue} \sqcup \mathbf{John}))\)
#+end_exe

** Super-generalized disjunction

#+name: ei
#+begin_exe
\ex Either Mary and Sue, or Sue and Bill met.
#+end_exe
  



#+print_bibliography:


